module co3.lscript.GenerateLinearisationScript

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
// trying to import DSL dependency
import eu.metatools.util.featurelogic.term.*

var rootPath = ".."
var projectName = "co3.linearisationScript"
var runtimeProject = "../${projectName}"

Workflow {

    bean = StandaloneSetup {
        scanClassPath = true
        registerGeneratedEPackage = "eu.metatools.util.featurelogic.term.term.TermPackage"
        registerGenModelFile = "platform:/resource/eu.metatools.util.featurelogic.term/model/generated/Term.genmodel"
    }

    component = XtextGenerator {

        configuration = {

            project = StandardProjectConfig {
                baseName = "co3.linearisationScript"
                rootPath = rootPath
                mavenLayout = true
            }
            code = {
                encoding = "UTF-8"
                fileHeader = "/*\n * generated by Xtext \${version}\n */"
            }
        }

        language = XtextGeneratorLanguage {

            name = "co3.lscript.LinearisationScript"
            fileExtensions = "ls"
            referencedResource = 'platform:/resource/eu.metatools.util.featurelogic.term/model/generated/Term.genmodel'

            fragment = grammarAccess.GrammarAccessFragment2 {}
            fragment = ecore.EMFGeneratorFragment2 {}
            fragment = serializer.SerializerFragment2 {}
            fragment = resourceFactory.ResourceFactoryFragment2 {}
            fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
                options = {
                    backtrack=true
                }
            }
            fragment = validation.ValidatorFragment2 {}
            fragment = scoping.ImportNamespacesScopingFragment2 {}
            fragment = exporting.QualifiedNamesFragment2 {}
            fragment = builder.BuilderIntegrationFragment2 {}
            fragment = generator.GeneratorFragment2 {
            }
            fragment = formatting.Formatter2Fragment2 {}
            fragment = ui.labeling.LabelProviderFragment2 {}
            fragment = ui.outline.QuickOutlineFragment2 {}
            fragment = ui.outline.OutlineTreeProviderFragment2 {}
            fragment = ui.quickfix.QuickfixProviderFragment2 {}
            fragment = ui.contentAssist.ContentAssistFragment2 {}
            fragment = junit.Junit4Fragment2 {}
            fragment = ui.refactoring.RefactorElementNameFragment2 {}
            fragment = types.TypesGeneratorFragment2 {}
            fragment = xbase.XtypeGeneratorFragment2 {}
            fragment = xbase.XbaseGeneratorFragment2 {}
            fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
            fragment = ui.compare.CompareFragment2 {}
            fragment = idea.parser.antlr.XtextAntlrIDEAGeneratorFragment {}
            fragment = idea.IdeaPluginGenerator {}
            fragment = web.WebIntegrationFragment {
                framework = "Ace"
            }
        }
    }
}
